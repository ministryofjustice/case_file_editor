#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application',  __FILE__)
require_relative '../config/boot'
require APP_PATH
Rails.application.require_environment!

def decode_type(type)
  if type < Axiom::Types::Type
    type.to_s.split(/::/).last
  else
    type
  end
end

def decode_attr(attr)
  case attr
  when Virtus::Attribute::Collection
    [:many, decode_attr(attr.send(:member_type)).last]
  when Virtus::Attribute::Boolean
    [:one, 'boolean']
  when Virtus::Attribute::EmbeddedValue
    [:one, attr.primitive]
  when Virtus::Attribute
    [:one, attr.primitive.to_s.downcase]
  end
end

def attributes(klass)
  klass.attribute_set.instance_variable_get('@index').
    select { |name, _| name.kind_of?(Symbol) }.
    map { |name, attr| [name, *decode_attr(attr)] }
end

def build_model(klass)
  ancestors = (klass.ancestors - klass.included_modules - Object.ancestors).
    drop(1)

  {
    class: klass,
    ancestors: ancestors,
    attributes: attributes(klass)
  }
end

models = Dir['app/models/*.rb'].
  map { |f|
    snake_case = File.basename(f, '.rb')
    require snake_case

    klass =
      ActiveSupport::Inflector.constantize(
        ActiveSupport::Inflector.camelize(snake_case))
  }.
  select { |c| c.is_a?(Class) }.
  map { |klass| [klass, build_model(klass)] }.
  to_h

puts <<END
digraph g {
  overlap=orthoy;
  splines=ortho;
  fontname="Lato";
  sep=0.25;
  epsilon=0.001;
  node [
    shape=record,
    fontname="Lato",
    style=filled,
    penwidth=1,
    labeljust=l,
    fillcolor="#ffffff"
  ];
  edge [
    fontname="Lato",
    fontsize=10,
    style=filled
  ];
END

models.sort_by { |k, _| k.to_s }.each do |klass, model|
  if model[:ancestors].any?
    puts "#{model[:class]} -> #{model[:ancestors].first} [arrowhead=empty];"
  end

  attributes = model[:ancestors].
    inject(model[:attributes]) { |a, e| a - models[e][:attributes] }

  lines = attributes.map { |name, ord, type|
    "+ #{name} : #{ord == :many ? "[#{type}]" : type}"
  }.join("\\l")
  puts %{#{model[:class]} [label="{#{model[:class]}|#{lines}\\l}"];}

  attributes.each do |name, _, type|
    next if type.is_a?(String)
    puts %{#{model[:class]} -> #{type} [arrowhead=none];}
  end
end

puts <<END
}
END
