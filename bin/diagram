#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application',  __FILE__)
require_relative '../config/boot'
require APP_PATH
Rails.application.require_environment!

def build_model(klass)
  ancestors = (klass.ancestors - klass.included_modules - Object.ancestors).
    drop(1)

  {
    class: klass,
    ancestors: ancestors,
    fields: FieldInspector.new.fields(klass)
  }
end

models = Dir['app/models/*.rb'].
  map { |f|
    snake_case = File.basename(f, '.rb')
    require snake_case

    klass =
      ActiveSupport::Inflector.constantize(
        ActiveSupport::Inflector.camelize(snake_case))
  }.
  select { |c| c.is_a?(Class) }.
  map { |klass| [klass, build_model(klass)] }.
  to_h

puts <<END
digraph g {
  overlap=orthoy;
  splines=ortho;
  fontname="Lato";
  sep=0.25;
  epsilon=0.001;
  node [
    shape=record,
    fontname="Lato",
    style=filled,
    penwidth=1,
    labeljust=l,
    fillcolor="#ffffff"
  ];
  edge [
    fontname="Lato",
    fontsize=10,
    style=filled
  ];
END

models.sort_by { |k, _| k.to_s }.each do |klass, model|
  if model[:ancestors].any?
    puts "#{model[:class]} -> #{model[:ancestors].first} [arrowhead=empty];"
  end

  fields = model[:ancestors].
    inject(model[:fields]) { |a, e| a - models[e][:fields] }

  lines = fields.map { |f|
    "+ #{f.name} : #{f.array? ? "[#{f.type}]" : f.type}"
  }.join("\\l")
  puts %{#{model[:class]} [label="{#{model[:class]}|#{lines}\\l}"];}

  fields.each do |f|
    next if f.basic?
    puts %{#{model[:class]} -> #{f.type} [arrowhead=none];}
  end
end

puts <<END
}
END
